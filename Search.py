# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SearchMenu.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5 import QtWidgets

import csv


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1241, 578)
        MainWindow.setStyleSheet("background-color: rgb(0, 170, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(410, 0, 451, 41))
        self.label.setStyleSheet(
            "\n" "color: rgb(0, 0, 0);\n" 'font: 87 24pt "Arial Black";\n' ""
        )
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(460, 60, 351, 51))
        self.label_2.setStyleSheet(
            'font: 87 12pt "Arial Black";\n' "background-color: rgb(255, 0, 0);"
        )
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(210, 170, 161, 31))
        self.comboBox.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(["Title", "Author", "ID", "Year", "Publisher", "Series"])
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 170, 141, 31))
        self.label_3.setStyleSheet(
            'font: 87 8pt "Arial Black";\n' "background-color: rgb(170, 85, 255);"
        )
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(60, 420, 111, 41))
        self.pushButton.setStyleSheet(
            'font: 87 12pt "Arial Black";\n' "background-color: rgb(255, 85, 127);"
        )
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(220, 420, 111, 41))
        self.pushButton_2.setStyleSheet(
            'font: 87 12pt "Arial Black";\n' "background-color: rgb(0, 255, 127);"
        )
        self.pushButton_2.setObjectName("pushButton_2")
        self.DataTable = QtWidgets.QTableWidget(self.centralwidget)
        self.DataTable.setGeometry(QtCore.QRect(400, 160, 801, 301))
        self.DataTable.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.DataTable.setObjectName("DataTable")
        self.DataTable.setColumnCount(8)
        self.DataTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(7, item)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 220, 141, 31))
        self.label_6.setStyleSheet(
            'font: 87 8pt "Arial Black";\n' "background-color: rgb(170, 85, 255);"
        )
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(210, 220, 161, 31))
        self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_4.setObjectName("lineEdit_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1241, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "LITERAL INSIGHTS"))
        self.label_2.setText(_translate("MainWindow", "SEARCHING"))
        self.label_3.setText(_translate("MainWindow", "Select Attribute:"))
        self.pushButton.setText(_translate("MainWindow", "SEARCH"))
        self.pushButton_2.setText(_translate("MainWindow", "BACK"))
        item = self.DataTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "TITLE"))
        item = self.DataTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "AUTHOR"))
        item = self.DataTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "PUBLISHER"))
        item = self.DataTable.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "YEAR"))
        item = self.DataTable.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "ISBN"))
        item = self.DataTable.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "PAGE"))
        item = self.DataTable.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "SERIES"))
        item = self.DataTable.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "ID"))
        self.label_6.setText(_translate("MainWindow", "Search"))


class MyApp(QtWidgets.QMainWindow):
    def __init__(self):
        super(MyApp, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.load_table()
        self.ui.pushButton.clicked.connect(self.on_search_clicked)
        self.ui.pushButton_2.clicked.connect(lambda: self.close())
        self.ui.comboBox.currentIndexChanged.connect(self.on_attribute_selected)

    def on_attribute_selected(self):
        attribute = self.ui.comboBox.currentText()
        
        print(f"Selected attribute: {attribute}")
        return attribute

    def search_data(self, attribute, search_text):
        data = self.getDisplayedData()
        print("Current data displayed:")
        print(data)
        filtered_data = []

        if attribute == "Title":
            filtered_data = [
                row for row in data if search_text.lower() in row[0].lower()
            ]
        elif attribute == "Author":
            filtered_data = [
                row for row in data if search_text.lower() in row[1].lower()
            ]
        elif attribute == "ID":
            filtered_data = [
                row for row in data if search_text.lower() in row[7].lower()
            ]
        elif attribute == "Year":
            filtered_data = [
                row for row in data if search_text.lower() in row[3].lower()
            ]
        elif attribute == "Publisher":
            filtered_data = [
                row for row in data if search_text.lower() in row[2].lower()
            ]
        else:
            filtered_data = [
                row for row in data if search_text.lower() in row[6].lower()
            ]
        # Add more cases for other attributes as needed

        print("Filtered data:")
        # print(filtered_data[0])

        self.fillData2(filtered_data)

    def getDisplayedData(self):
        data = []
        for row in range(self.ui.DataTable.rowCount()):
            row_data = [
                self.ui.DataTable.item(row, col).text()
                for col in range(self.ui.DataTable.columnCount())
            ]
            data.append(row_data)
        return data

    def on_search_clicked(self):
        attribute = self.on_attribute_selected()
        search_text = self.ui.lineEdit_4.text()
        print(f"Searching for '{search_text}' in attribute '{attribute}'")
        self.search_data(attribute, search_text)

    def getDataFromCsv(self, startPoint, endPoint):
        with open("combined_file.csv", "r", encoding="utf_8_sig") as fileInput:
            data = list(csv.reader(fileInput))
            if endPoint >= len(data):
                return
            if startPoint == 0:
                startPoint += 1
                endPoint += 1
            data = data[startPoint : endPoint + 1]

            temp = [6, 8, 9]
            for i in data:
                if i[6]:
                    try:
                        i[6] = int(i[6])
                    except:
                        i[6] = 0
                else:
                    i[6] = 0

                if i[8]:
                    try:
                        i[8] = int(i[8])
                    except:
                        i[8] = 0
                else:
                    i[8] = 0

                if i[9]:
                    try:
                        i[9] = float(i[9])
                    except:
                        i[9] = 0
                else:
                    i[9] = 0

            return data

    def load_table(self, startPoint=1, endPoint=1000):
        data = self.getDataFromCsv(startPoint, endPoint)
        self.fillData(data=data)


    def fillData2(self, data):
        self.ui.DataTable.clear()

        self.ui.DataTable.setHorizontalHeaderLabels(("TITLE","AUTHOR","PUBLISHER","YEAR","ISBN","PAGE","SERIES","ID"))
        roww = 0
        self.ui.DataTable.setRowCount(len(data))
        for row in data:
            self.ui.DataTable.setItem(roww, 0 , QtWidgets.QTableWidgetItem((row[0])))
            self.ui.DataTable.setItem(roww, 1 , QtWidgets.QTableWidgetItem((row[1])))
            self.ui.DataTable.setItem(roww, 2 , QtWidgets.QTableWidgetItem((row[2])))
            self.ui.DataTable.setItem(roww, 3 , QtWidgets.QTableWidgetItem((row[3])))
            self.ui.DataTable.setItem(roww, 4 , QtWidgets.QTableWidgetItem((row[4])))
            self.ui.DataTable.setItem(roww, 5 , QtWidgets.QTableWidgetItem((str(row[5]))))
            self.ui.DataTable.setItem(roww, 6 , QtWidgets.QTableWidgetItem((row[6])))
            self.ui.DataTable.setItem(roww, 7 , QtWidgets.QTableWidgetItem((str(row[7]))))
            # self.ui.DataTable.setItem(roww, 8 , QtWidgets.QTableWidgetItem((str(row[9]))))
            # self.ui.DataTable.setItem(roww, 9 , QtWidgets.QTableWidgetItem((row[10])))
            roww += 1


    def fillData(self, data):
        self.ui.DataTable.clear()

        self.ui.DataTable.setHorizontalHeaderLabels(("TITLE","AUTHOR","PUBLISHER","YEAR","ISBN","PAGE","SERIES","ID"))
        roww = 0
        self.ui.DataTable.setRowCount(len(data))
        for row in data:
            self.ui.DataTable.setItem(roww, 0 , QtWidgets.QTableWidgetItem((row[0])))
            self.ui.DataTable.setItem(roww, 1 , QtWidgets.QTableWidgetItem((row[1])))
            self.ui.DataTable.setItem(roww, 2 , QtWidgets.QTableWidgetItem((row[2])))
            self.ui.DataTable.setItem(roww, 3 , QtWidgets.QTableWidgetItem((row[3])))
            self.ui.DataTable.setItem(roww, 4 , QtWidgets.QTableWidgetItem((row[5])))
            self.ui.DataTable.setItem(roww, 5 , QtWidgets.QTableWidgetItem((str(row[6]))))
            self.ui.DataTable.setItem(roww, 6 , QtWidgets.QTableWidgetItem((row[7])))
            self.ui.DataTable.setItem(roww, 7 , QtWidgets.QTableWidgetItem((str(row[8]))))
            # self.ui.DataTable.setItem(roww, 8 , QtWidgets.QTableWidgetItem((str(row[9]))))
            # self.ui.DataTable.setItem(roww, 9 , QtWidgets.QTableWidgetItem((row[10])))
            roww += 1
        # self.ui.DataTable.clear()

        # self.ui.DataTable.setHorizontalHeaderLabels(
        #     (
        #         "TITLE",
        #         "AUTHOR",
        #         "PUBLISHER",
        #         "YEAR",
        #         "ISBN",
        #         "PAGE",
        #         "SERIES",
        #         "ID",
                
        #     )
        # )
        # self.ui.DataTable.setRowCount(len(data))
        # for roww, row in enumerate(data):
        #     for col, item in enumerate(row):
        #         if col == 4 or col > 6:
        #             continue
        #         if col < len(row) and roww < self.ui.DataTable.rowCount():
        #             # Ensure that the column index is within the range of the table's columns
        #             self.ui.DataTable.setItem(roww, col, QtWidgets.QTableWidgetItem(str(item)))
        #         else:
        #             print(f"Error: Row {roww}, Column {col} is out of range.")





# if __name__ == "__main__":
#     app = QtWidgets.QApplication(sys.argv)
#     window = MyApp()
#     window.show()
#     sys.exit(app.exec_())
